generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  id         String             @id @default(uuid())
  password   String
  created_at DateTime           @default(now())
  updated_at DateTime           @updatedAt
  email      String             @unique
  phone      String?
  actions    DevicesActionLog[]
}

model Sensor {
  id         String       @id @default(uuid())
  name       String
  is_active  Boolean      @default(true)
  location   String?
  created_at DateTime     @default(now())
  updated_at DateTime     @updatedAt
  data       SensorData[]
}

model SensorData {
  id          Int      @id @default(autoincrement())
  sensor_id   String?
  data        Json
  temperature Float?
  humidity    Float?
  light       Float?
  created_at  DateTime @default(now())
  sensor      Sensor?  @relation(fields: [sensor_id], references: [id], onDelete: Cascade)
}

model Device {
  id         String               @id @default(uuid())
  name       String
  location   String?
  created_at DateTime             @default(now())
  updated_at DateTime             @updatedAt
  sensor_id  String               @unique
  port       Int                  @default(0)
  status     CurrentDeviceStatus?
  scripts    DeviceScript[]
  actions    DevicesActionLog[]

  @@unique([id, sensor_id])
  @@index([id, sensor_id])
}

model CurrentDeviceStatus {
  device_id  String       @id
  status     DeviceStatus
  updated_at DateTime     @updatedAt
  device     Device       @relation(fields: [device_id], references: [id], onDelete: Cascade)
}

model DevicesActionLog {
  id            Int              @id @default(autoincrement())
  device_id     String
  action        DeviceActionType
  user_id       String
  is_executing  Boolean          @default(false)
  status_before String
  status_after  String?
  created_at    DateTime         @default(now())
  device        Device           @relation(fields: [device_id], references: [id], onDelete: Cascade)
  user          User             @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model DeviceScript {
  id          String            @id @default(uuid())
  device_id   String
  name        String
  description String?
  is_active   Boolean           @default(true)
  created_at  DateTime          @default(now())
  updated_at  DateTime          @updatedAt
  device      Device            @relation(fields: [device_id], references: [id], onDelete: Cascade)
  actions     ScriptAction[]
  conditions  ScriptCondition[]
}

model ScriptCondition {
  id              String              @id @default(uuid())
  script_id       String
  condition_type  ScriptConditionType
  sensor_type     SensorType
  comparison_type ComparisonType
  value           Float
  script          DeviceScript        @relation(fields: [script_id], references: [id], onDelete: Cascade)
}

model ScriptAction {
  id            String           @id @default(uuid())
  script_id     String
  action_type   DeviceActionType
  action_target String
  action_value  String?
  script        DeviceScript     @relation(fields: [script_id], references: [id], onDelete: Cascade)
}

enum DeviceStatus {
  on
  off
  standby
}

enum DeviceActionType {
  switch_on
  switch_off
  adjust_temperature
}

enum ScriptConditionType {
  AND
  OR
}

enum SensorType {
  TEMPERATURE
  HUMIDITY
  LIGHT
  DEVICE_STATUS
}

enum ComparisonType {
  LESS_THAN
  GREATER_THAN
  EQUAL_TO
  NOT_EQUAL_TO
  LESS_THAN_OR_EQUAL
  GREATER_THAN_OR_EQUAL
}
